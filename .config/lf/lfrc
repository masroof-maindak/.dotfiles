&[ $LF_LEVEL -eq 1 ] || lf -remote "send $id echoerr \"Warning: You're in a nested lf instance!\""

set shell bash
set shellopts '-eu'
set mouse
set sixel
set info size:time
set ratios 2:4:6
set ifs "\n"
set scrolloff 8
set autoquit

set relativenumber
set number
# set period 1 # polling time

set statfmt "\033[7;31m %p \033[32m %c \033[33m %u %g \033[34m %s \033[35m %t |\033[36m %l |\033[0m"


#___
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id


#___
# preview pane is `dim` insead of `underline`
set cursorpreviewfmt "\033[7;90m"


#___
# use enter for shell commands
map <enter> shell


#___
# show the result of execution of previous commands
map ` !true


#___
# Toggle hidden files with backspace
map <backspace2> set hidden!


#___
# execute current file (must be executable) ...
map x $$f
map X !$f # and wait for key press

#___ TODO: look into this sometime.
# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}


#___
map p : paste;clear
map <esc> :{{unselect; clear;}}


#___
# mkdir/touch command
cmd mkdir %mkdir "$@"
map a push :mkdir<space>

cmd touch %touch "$@"
map + push :touch<space>


#___
# Drag files
cmd drag $dragon-drop -a -s 72 $fx
map RA :drag


#___
# Select/Jump to file/folder
cmd fzf_jump ${{
  res="$(find . -maxdepth 8 | fzf --reverse --header='Jump...')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}
map <c-f> :fzf_jump


#___
# Search contents of files inside current directory
cmd fzf_search ${{

    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
    res="$(
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1 | sed 's/\\/\\\\/g;s/"/\\"/g'
    )"
    [ -n "$res" ] && lf -remote "send $id select \"$res\""

}}
map gs :fzf_search


#___
# delete
cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete? [Y/n]: "
    read ans
    [ "$ans" = "n" ] || rm -rf $fx
}}
map D :delete


#___
# set wallpaper
cmd setwall $swww img "$f"
map WAL :setwall

# cmd setwallTile $feh --bg-tile "$f"
# map WAT :setwallTile


#___
cmd toggle_preview %{{
    if [ "$lf_preview" = "true" ]; then
        lf -remote "send $id :set preview false; set ratios 1:5"
    else
        lf -remote "send $id :set preview true; set ratios 1:2:3"
    fi
}}
map zp toggle_preview


#___
# Edit config
cmd edit-config ${{
    $EDITOR ~/.config/lf/lfrc
    lf -remote "send $id source ~/.config/lf/lfrc"
}}
map C edit-config


#___
# Move in parent directory
cmd move-parent &{{
    dironly="setlocal '$(dirname "$PWD")' dironly"
    lf -remote "send $id :updir; $dironly true; $1; $dironly false; open"
}}
map J move-parent down
map K move-parent up


#___
# Copying
cmd yank-path $printf '%s' "$f" | wl-copy
cmd yank-contents $wl-copy < "$f"
cmd yank-image ${{
    mime_type=$(file --mime-type -b $f)
    [ "$mime_type" = "image/png" ] && cat $f | wl-copy --type image/png || magick $f png:- | wl-copy --type image/png
}}

map y
map yy :copy
map yf :yank-contents
map yi :yank-image
map yp :yank-path


#___
# extract
cmd extract ${{
	set -f
	case $f in
		*.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf "$f" ;;
		*.tar.gz|*.tgz) tar xzvf "$f" ;;
		*.tar.xz|*.txz) tar xJvf "$f" ;;
		*.tar.zst|*.tzst) tar -xvf "$f" ;;
		*.zip) unzip "$f" ;;
		*.rar) unrar x "$f" ;;
		*.7z) 7z x "$f" ;;
		*) notify-send "Failed to extract '$f'..." ;;
	esac
	[ $? -eq 0 ] && lf -remote "send $id :reload"
}}
map <c-x> extract


#___
# New folder with selected items
cmd newfold ${{
    set -f
    printf "Directory name: "
    read newd
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}
map <a-n> newfold


#___
# compress targz
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}


#___
# compress zip
cmd zip ${{
	set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}


#___
# Bulk rename files in $EDITOR
cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a -- $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" > "$old"
    printf '%s\n' "$fs" > "$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}
map BR bulk-rename


#___
# Follow symlink to original file
cmd follow-link %{{
	lf -remote "send $id select \"$(readlink -- "$f" | sed 's/\\/\\\\/g;s/"/\\"/g')\""
}}
map gL follow-link
